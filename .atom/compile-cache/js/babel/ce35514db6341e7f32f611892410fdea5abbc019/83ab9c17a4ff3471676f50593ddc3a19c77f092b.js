var getNotification = _asyncToGenerator(function* (expectedMessage) {
  return new Promise(function (resolve) {
    var notificationSub = undefined;
    var newNotification = function newNotification(notification) {
      if (notification.getMessage() !== expectedMessage) {
        // As the specs execute asynchronously, it's possible a notification
        // from a different spec was grabbed, if the message doesn't match what
        // is expected simply return and keep waiting for the next message.
        return;
      }
      // Dispose of the notificaiton subscription
      notificationSub.dispose();
      resolve(notification);
    };
    // Subscribe to Atom's notifications
    notificationSub = atom.notifications.onDidAddNotification(newNotification);
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

// eslint-disable-next-line no-unused-vars

var _jasmineFix = require('jasmine-fix');

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _libMain = require('../lib/main');

var _libMain2 = _interopRequireDefault(_libMain);

'use babel';

var goodPath = path.join(__dirname, 'fixtures', 'good.js');
var bitwisePath = path.join(__dirname, 'fixtures', 'bitwise', 'bitwise.js');

describe('The JSHint provider for Linter', function () {
  var _linter$provideLinter = _libMain2['default'].provideLinter();

  var lint = _linter$provideLinter.lint;

  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    yield atom.packages.activatePackage('linter-jshint');
    yield atom.packages.activatePackage('language-javascript');
  }));

  (0, _jasmineFix.it)('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-jshint')).toBe(true);
  });

  (0, _jasmineFix.it)('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-jshint')).toBe(true);
  });

  describe('shows errors in a file with issues', function () {
    var editor = null;

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open(bitwisePath);
    }));

    (0, _jasmineFix.it)('verifies the first message', _asyncToGenerator(function* () {
      var expected = "W016 - Unexpected use of '&'.";

      var messages = yield lint(editor);
      expect(messages[0].severity).toBe('warning');
      expect(messages[0].excerpt).toBe(expected);
      expect(messages[0].location.file).toBe(bitwisePath);
      expect(messages[0].location.position).toEqual([[0, 10], [0, 13]]);
    }));
  });

  (0, _jasmineFix.it)('finds nothing wrong with an empty file', _asyncToGenerator(function* () {
    var emptyPath = path.join(__dirname, 'fixtures', 'empty.js');
    var editor = yield atom.workspace.open(emptyPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
  }));

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(goodPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
  }));

  describe('shows syntax errors', function () {
    var syntaxPath = path.join(__dirname, 'fixtures', 'syntax', 'badSyntax.js');
    var editor = null;

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open(syntaxPath);
    }));

    (0, _jasmineFix.it)('verifies the first message', _asyncToGenerator(function* () {
      var message = 'E006 - Unexpected early end of program.';
      var messages = yield lint(editor);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe(message);
      expect(messages[0].location.file).toBe(syntaxPath);
      expect(messages[0].location.position).toEqual([[0, 10], [0, 11]]);
    }));
  });

  describe('handles .jshintignore files', function () {
    var checkMessage = function checkMessage(message, filePath) {
      var expected = "W098 - 'foo' is defined but never used.";

      expect(message.severity).toBe('warning');
      expect(message.excerpt).toBe(expected);
      expect(message.location.file).toBe(filePath);
      expect(message.location.position).toEqual([[0, 4], [0, 7]]);
    };

    (0, _jasmineFix.it)('works when in the same directory', _asyncToGenerator(function* () {
      var ignoreDir = path.join(__dirname, 'fixtures', 'ignore');
      var checkedPath = path.join(ignoreDir, 'checked.js');
      var ignoredPath = path.join(ignoreDir, 'ignored.js');
      var checkEditor = yield atom.workspace.open(checkedPath);
      var ignoreEditor = yield atom.workspace.open(ignoredPath);
      var checkMessages = yield lint(checkEditor);
      var ignoreMessages = yield lint(ignoreEditor);

      expect(checkMessages.length).toBe(1);
      checkMessage(checkMessages[0], checkedPath);

      expect(ignoreMessages.length).toBe(0);
    }));

    (0, _jasmineFix.it)('handles relative paths in .jshintignore', _asyncToGenerator(function* () {
      var ignoreDir = path.join(__dirname, 'fixtures', 'ignore-relative', 'js');
      var checkedPath = path.join(ignoreDir, 'checked.js');
      var ignoredPath = path.join(ignoreDir, 'ignored.js');
      var checkEditor = yield atom.workspace.open(checkedPath);
      var ignoreEditor = yield atom.workspace.open(ignoredPath);
      var checkMessages = yield lint(checkEditor);
      var ignoreMessages = yield lint(ignoreEditor);

      expect(checkMessages.length).toBe(1);
      checkMessage(checkMessages[0], checkedPath);

      expect(ignoreMessages.length).toBe(0);
    }));
  });

  describe('prints debugging information with the `debug` command', function () {
    var editor = undefined;
    var expectedMessage = 'linter-jshint:: Debugging information';
    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open(goodPath);
    }));

    (0, _jasmineFix.it)('shows an info notification', _asyncToGenerator(function* () {
      atom.commands.dispatch(atom.views.getView(editor), 'linter-jshint:debug');
      var notification = yield getNotification(expectedMessage);

      expect(notification.getMessage()).toBe(expectedMessage);
      expect(notification.getType()).toEqual('info');
    }));

    (0, _jasmineFix.it)('includes debugging information in the details', _asyncToGenerator(function* () {
      atom.commands.dispatch(atom.views.getView(editor), 'linter-jshint:debug');
      var notification = yield getNotification(expectedMessage);
      var detail = notification.getDetail();

      expect(detail.includes('Atom version: ' + atom.getVersion())).toBe(true);
      expect(detail.includes('linter-jshint version:')).toBe(true);
      expect(detail.includes('Platform: ' + process.platform)).toBe(true);
      expect(detail.includes('linter-jshint configuration:')).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,