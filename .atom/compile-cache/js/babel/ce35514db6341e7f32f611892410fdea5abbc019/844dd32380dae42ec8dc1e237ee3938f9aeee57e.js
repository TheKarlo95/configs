function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */
/* eslint-env jasmine, atomtest */

/* This file contains all specs to ensure the base-functionality of
this plugin. */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var projectRoot = _path2['default'].join(__dirname, 'fixtures');
var filePath = _path2['default'].join(projectRoot, 'base.txt');

describe('editorconfig', function () {
	var textEditor = null;

	beforeEach(function () {
		waitsForPromise(function () {
			return Promise.all([atom.packages.activatePackage('editorconfig'), atom.workspace.open(filePath)]).then(function (results) {
				textEditor = results[1];
			});
		});
	});

	it('should provide the EditorConfig:generate-config command', function () {
		var isAvailable = false;
		atom.commands.findCommands({ target: atom.views.getView(atom.workspace) }).forEach(function (command) {
			if (command.name === 'EditorConfig:generate-config') {
				isAvailable = true;
			}
		});
		expect(isAvailable).toBeTruthy();
	});

	it('should provide the EditorConfig:show-state command', function () {
		var isAvailable = false;
		atom.commands.findCommands({ target: atom.views.getView(atom.workspace) }).forEach(function (command) {
			if (command.name === 'EditorConfig:show-state') {
				isAvailable = true;
			}
		});
		expect(isAvailable).toBeTruthy();
	});

	it('should have set the indent_style to "space"', function () {
		expect(textEditor.getSoftTabs()).toBeTruthy();
	});

	it('should have set the indent_size to 2 characters', function () {
		expect(textEditor.getTabLength()).toEqual(2);
	});

	it('should have set the end_of_line-character to "lf"', function () {
		expect(textEditor.getBuffer().getPreferredLineEnding()).toMatch('\n');
	});

	it('should have set the charset of the document to "utf8"', function () {
		expect(textEditor.getEncoding()).toMatch('utf8');
	});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWthcmxvOTUvLmF0b20vcGFja2FnZXMvZWRpdG9yY29uZmlnL3NwZWMvYmFzZS1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQU1pQixNQUFNOzs7O0FBRXZCLElBQU0sV0FBVyxHQUFHLGtCQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckQsSUFBTSxRQUFRLEdBQUcsa0JBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQzs7QUFFcEQsUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQzlCLEtBQUksVUFBVSxHQUFHLElBQUksQ0FBQzs7QUFFdEIsV0FBVSxDQUFDLFlBQU07QUFDaEIsaUJBQWUsQ0FBQztVQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLEVBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQ2xCLGNBQVUsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQztHQUFBLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQzs7QUFFSCxHQUFFLENBQUMseURBQXlELEVBQUUsWUFBTTtBQUNuRSxNQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDeEIsTUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FDdEUsT0FBTyxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQ25CLE9BQUksT0FBTyxDQUFDLElBQUksS0FBSyw4QkFBOEIsRUFBRTtBQUNwRCxlQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ25CO0dBQ0QsQ0FBQyxDQUFDO0FBQ0osUUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0VBQ2pDLENBQUMsQ0FBQzs7QUFFSCxHQUFFLENBQUMsb0RBQW9ELEVBQUUsWUFBTTtBQUM5RCxNQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDeEIsTUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FDdEUsT0FBTyxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQ25CLE9BQUksT0FBTyxDQUFDLElBQUksS0FBSyx5QkFBeUIsRUFBRTtBQUMvQyxlQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ25CO0dBQ0QsQ0FBQyxDQUFDO0FBQ0osUUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0VBQ2pDLENBQUMsQ0FBQzs7QUFFSCxHQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtBQUN2RCxRQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7RUFDOUMsQ0FBQyxDQUFDOztBQUVILEdBQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFNO0FBQzNELFFBQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0MsQ0FBQyxDQUFDOztBQUVILEdBQUUsQ0FBQyxtREFBbUQsRUFBRSxZQUFNO0FBQzdELFFBQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUN0RSxDQUFDLENBQUM7O0FBRUgsR0FBRSxDQUFDLHVEQUF1RCxFQUFFLFlBQU07QUFDakUsUUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNqRCxDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJmaWxlIjoiL2hvbWUvdGhla2FybG85NS8uYXRvbS9wYWNrYWdlcy9lZGl0b3Jjb25maWcvc3BlYy9iYXNlLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG4vKiBlc2xpbnQtZW52IGphc21pbmUsIGF0b210ZXN0ICovXG5cbi8qIFRoaXMgZmlsZSBjb250YWlucyBhbGwgc3BlY3MgdG8gZW5zdXJlIHRoZSBiYXNlLWZ1bmN0aW9uYWxpdHkgb2ZcbnRoaXMgcGx1Z2luLiAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgcHJvamVjdFJvb3QgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnKTtcbmNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHByb2plY3RSb290LCAnYmFzZS50eHQnKTtcblxuZGVzY3JpYmUoJ2VkaXRvcmNvbmZpZycsICgpID0+IHtcblx0bGV0IHRleHRFZGl0b3IgPSBudWxsO1xuXG5cdGJlZm9yZUVhY2goKCkgPT4ge1xuXHRcdHdhaXRzRm9yUHJvbWlzZSgoKSA9PiBQcm9taXNlLmFsbChbXG5cdFx0XHRhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZSgnZWRpdG9yY29uZmlnJyksXG5cdFx0XHRhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVQYXRoKVxuXHRcdF0pLnRoZW4ocmVzdWx0cyA9PiB7XG5cdFx0XHR0ZXh0RWRpdG9yID0gcmVzdWx0c1sxXTtcblx0XHR9KSk7XG5cdH0pO1xuXG5cdGl0KCdzaG91bGQgcHJvdmlkZSB0aGUgRWRpdG9yQ29uZmlnOmdlbmVyYXRlLWNvbmZpZyBjb21tYW5kJywgKCkgPT4ge1xuXHRcdGxldCBpc0F2YWlsYWJsZSA9IGZhbHNlO1xuXHRcdGF0b20uY29tbWFuZHMuZmluZENvbW1hbmRzKHt0YXJnZXQ6IGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSl9KVxuXHRcdFx0LmZvckVhY2goY29tbWFuZCA9PiB7XG5cdFx0XHRcdGlmIChjb21tYW5kLm5hbWUgPT09ICdFZGl0b3JDb25maWc6Z2VuZXJhdGUtY29uZmlnJykge1xuXHRcdFx0XHRcdGlzQXZhaWxhYmxlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0ZXhwZWN0KGlzQXZhaWxhYmxlKS50b0JlVHJ1dGh5KCk7XG5cdH0pO1xuXG5cdGl0KCdzaG91bGQgcHJvdmlkZSB0aGUgRWRpdG9yQ29uZmlnOnNob3ctc3RhdGUgY29tbWFuZCcsICgpID0+IHtcblx0XHRsZXQgaXNBdmFpbGFibGUgPSBmYWxzZTtcblx0XHRhdG9tLmNvbW1hbmRzLmZpbmRDb21tYW5kcyh7dGFyZ2V0OiBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpfSlcblx0XHRcdC5mb3JFYWNoKGNvbW1hbmQgPT4ge1xuXHRcdFx0XHRpZiAoY29tbWFuZC5uYW1lID09PSAnRWRpdG9yQ29uZmlnOnNob3ctc3RhdGUnKSB7XG5cdFx0XHRcdFx0aXNBdmFpbGFibGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRleHBlY3QoaXNBdmFpbGFibGUpLnRvQmVUcnV0aHkoKTtcblx0fSk7XG5cblx0aXQoJ3Nob3VsZCBoYXZlIHNldCB0aGUgaW5kZW50X3N0eWxlIHRvIFwic3BhY2VcIicsICgpID0+IHtcblx0XHRleHBlY3QodGV4dEVkaXRvci5nZXRTb2Z0VGFicygpKS50b0JlVHJ1dGh5KCk7XG5cdH0pO1xuXG5cdGl0KCdzaG91bGQgaGF2ZSBzZXQgdGhlIGluZGVudF9zaXplIHRvIDIgY2hhcmFjdGVycycsICgpID0+IHtcblx0XHRleHBlY3QodGV4dEVkaXRvci5nZXRUYWJMZW5ndGgoKSkudG9FcXVhbCgyKTtcblx0fSk7XG5cblx0aXQoJ3Nob3VsZCBoYXZlIHNldCB0aGUgZW5kX29mX2xpbmUtY2hhcmFjdGVyIHRvIFwibGZcIicsICgpID0+IHtcblx0XHRleHBlY3QodGV4dEVkaXRvci5nZXRCdWZmZXIoKS5nZXRQcmVmZXJyZWRMaW5lRW5kaW5nKCkpLnRvTWF0Y2goJ1xcbicpO1xuXHR9KTtcblxuXHRpdCgnc2hvdWxkIGhhdmUgc2V0IHRoZSBjaGFyc2V0IG9mIHRoZSBkb2N1bWVudCB0byBcInV0ZjhcIicsICgpID0+IHtcblx0XHRleHBlY3QodGV4dEVkaXRvci5nZXRFbmNvZGluZygpKS50b01hdGNoKCd1dGY4Jyk7XG5cdH0pO1xufSk7XG4iXX0=