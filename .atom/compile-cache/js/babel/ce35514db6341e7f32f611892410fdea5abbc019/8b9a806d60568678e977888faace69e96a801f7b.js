'use babel';

exports.transform = function (svg, outputType, callback) {
  var img = document.createElement('img');
  img.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svg);

  img.addEventListener('load', function (event) {
    // create an (undisplayed) canvas
    var canvas = document.createElement('canvas');
    var img = event.target;

    // resize the canvas to the size of the image
    canvas.width = img.width;
    canvas.height = img.height;

    // ... and draw the image on there
    canvas.getContext('2d').drawImage(img, 0, 0);

    // smurf the data url of the canvas
    var dataURL = canvas.toDataURL('image/' + outputType, 0.8);

    // extract the base64 encoded image, decode and return it
    return callback(Buffer.from(dataURL.replace('data:image/' + outputType + ';base64,', ''), 'base64'));
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWthcmxvOTUvLmF0b20vcGFja2FnZXMvc3ZnLXByZXZpZXcvbGliL3N2Zy10by1yYXN0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFBOztBQUVYLE9BQU8sQ0FBQyxTQUFTLEdBQUcsVUFBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBSztBQUNqRCxNQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3ZDLEtBQUcsQ0FBQyxHQUFHLHlDQUF1QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQUFBRSxDQUFBOztBQUV2RSxLQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFVBQUMsS0FBSyxFQUFLOztBQUV0QyxRQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzdDLFFBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7OztBQUd0QixVQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUE7QUFDeEIsVUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBOzs7QUFHMUIsVUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTs7O0FBRzVDLFFBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLFlBQVUsVUFBVSxFQUFJLEdBQUcsQ0FBQyxDQUFBOzs7QUFHNUQsV0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxpQkFBZSxVQUFVLGVBQVksRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtHQUNoRyxDQUFDLENBQUE7Q0FDSCxDQUFBIiwiZmlsZSI6Ii9ob21lL3RoZWthcmxvOTUvLmF0b20vcGFja2FnZXMvc3ZnLXByZXZpZXcvbGliL3N2Zy10by1yYXN0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuXG5leHBvcnRzLnRyYW5zZm9ybSA9IChzdmcsIG91dHB1dFR5cGUsIGNhbGxiYWNrKSA9PiB7XG4gIGxldCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKVxuICBpbWcuc3JjID0gYGRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCR7ZW5jb2RlVVJJQ29tcG9uZW50KHN2Zyl9YFxuXG4gIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gY3JlYXRlIGFuICh1bmRpc3BsYXllZCkgY2FudmFzXG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgbGV0IGltZyA9IGV2ZW50LnRhcmdldFxuXG4gICAgLy8gcmVzaXplIHRoZSBjYW52YXMgdG8gdGhlIHNpemUgb2YgdGhlIGltYWdlXG4gICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoXG4gICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHRcblxuICAgIC8vIC4uLiBhbmQgZHJhdyB0aGUgaW1hZ2Ugb24gdGhlcmVcbiAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1nLCAwLCAwKVxuXG4gICAgLy8gc211cmYgdGhlIGRhdGEgdXJsIG9mIHRoZSBjYW52YXNcbiAgICBjb25zdCBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTChgaW1hZ2UvJHtvdXRwdXRUeXBlfWAsIDAuOClcblxuICAgIC8vIGV4dHJhY3QgdGhlIGJhc2U2NCBlbmNvZGVkIGltYWdlLCBkZWNvZGUgYW5kIHJldHVybiBpdFxuICAgIHJldHVybiBjYWxsYmFjayhCdWZmZXIuZnJvbShkYXRhVVJMLnJlcGxhY2UoYGRhdGE6aW1hZ2UvJHtvdXRwdXRUeXBlfTtiYXNlNjQsYCwgJycpLCAnYmFzZTY0JykpXG4gIH0pXG59XG4iXX0=