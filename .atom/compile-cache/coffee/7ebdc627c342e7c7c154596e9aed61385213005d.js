(function() {
  describe("Tag autocomplete tests", function() {
    var buffer, editor, languageMode, ref;
    ref = [], editor = ref[0], buffer = ref[1], languageMode = ref[2];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage("react");
      });
      return waitsForPromise(function() {
        return atom.workspace.open("foofoo", {
          autoIndent: false
        }).then(function(o) {
          var grammar;
          editor = o;
          buffer = editor.buffer, languageMode = editor.languageMode;
          grammar = atom.grammars.grammarForScopeName("source.js.jsx");
          return editor.setGrammar(grammar);
        });
      });
    });
    afterEach(function() {
      waitsForPromise(function() {
        return atom.packages.deactivatePackages();
      });
      return runs(function() {
        return atom.packages.unloadPackages();
      });
    });
    return describe("tag handling", function() {
      it("should autocomplete tag", function() {
        editor.insertText('<p');
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p></p>');
      });
      it("should not autocomplete tag attributes", function() {
        editor.insertText('<p attr={ 1');
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p attr={ 1>');
      });
      it("should not autocomplete tag attributes with arrow functions", function() {
        editor.insertText('<p attr={number =');
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p attr={number =>');
      });
      it("should not autocomplete tag attributes when insterted between", function() {
        editor.insertText('<p attr={ 1 }');
        editor.setCursorBufferPosition([0, 11]);
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p attr={ 1> }');
      });
      it("should remove closing tag", function() {
        editor.insertText('<p');
        editor.insertText('>');
        expect(editor.getText()).toBe('<p></p>');
        editor.backspace();
        return expect(editor.getText()).toBe('<p');
      });
      return it("should add extra line break when new line added between open and close tag", function() {
        editor.insertText('<p></p>');
        editor.setCursorBufferPosition([0, 3]);
        editor.insertText('\n');
        expect(editor.buffer.getLines()[0]).toBe('<p>');
        expect(editor.buffer.getLines()[2]).toBe('</p>');
        editor.setText("");
        editor.insertText('<p\n  attr=""></p>');
        editor.setCursorBufferPosition([1, 10]);
        editor.insertText('\n');
        expect(editor.buffer.getLines()[0]).toBe('<p');
        expect(editor.buffer.getLines()[1]).toBe('  attr="">');
        return expect(editor.buffer.getLines()[3]).toBe('</p>');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvdGhla2FybG85NS8uYXRvbS9wYWNrYWdlcy9yZWFjdC9zcGVjL2F1dG9jb21wbGV0ZS1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLFFBQUEsQ0FBUyx3QkFBVCxFQUFtQyxTQUFBO0FBQ2pDLFFBQUE7SUFBQSxNQUFpQyxFQUFqQyxFQUFDLGVBQUQsRUFBUyxlQUFULEVBQWlCO0lBRWpCLFVBQUEsQ0FBVyxTQUFBO01BQ1QsZUFBQSxDQUFnQixTQUFBO2VBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFkLENBQThCLE9BQTlCO01BRGMsQ0FBaEI7YUFHQSxlQUFBLENBQWdCLFNBQUE7ZUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLElBQWYsQ0FBb0IsUUFBcEIsRUFBOEI7VUFBQSxVQUFBLEVBQVksS0FBWjtTQUE5QixDQUFnRCxDQUFDLElBQWpELENBQXNELFNBQUMsQ0FBRDtBQUNwRCxjQUFBO1VBQUEsTUFBQSxHQUFTO1VBQ1Isc0JBQUQsRUFBUztVQUNULE9BQUEsR0FBVSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFkLENBQWtDLGVBQWxDO2lCQUNWLE1BQU0sQ0FBQyxVQUFQLENBQWtCLE9BQWxCO1FBSm9ELENBQXREO01BRFksQ0FBaEI7SUFKUyxDQUFYO0lBV0EsU0FBQSxDQUFVLFNBQUE7TUFDUixlQUFBLENBQWdCLFNBQUE7ZUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFkLENBQUE7TUFEYyxDQUFoQjthQUVBLElBQUEsQ0FBSyxTQUFBO2VBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFkLENBQUE7TUFERyxDQUFMO0lBSFEsQ0FBVjtXQU1BLFFBQUEsQ0FBUyxjQUFULEVBQXlCLFNBQUE7TUFDdkIsRUFBQSxDQUFHLHlCQUFILEVBQThCLFNBQUE7UUFDNUIsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsSUFBbEI7UUFDQSxNQUFNLENBQUMsVUFBUCxD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aWJlIFwiVGFnIGF1dG9jb21wbGV0ZSB0ZXN0c1wiLCAtPlxuICBbZWRpdG9yLCBidWZmZXIsIGxhbmd1YWdlTW9kZV0gPSBbXVxuXG4gIGJlZm9yZUVhY2ggLT5cbiAgICB3YWl0c0ZvclByb21pc2UgLT5cbiAgICAgIGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKFwicmVhY3RcIilcblxuICAgIHdhaXRzRm9yUHJvbWlzZSAtPlxuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKFwiZm9vZm9vXCIsIGF1dG9JbmRlbnQ6IGZhbHNlKS50aGVuIChvKSAtPlxuICAgICAgICAgIGVkaXRvciA9IG9cbiAgICAgICAgICB7YnVmZmVyLCBsYW5ndWFnZU1vZGV9ID0gZWRpdG9yXG4gICAgICAgICAgZ3JhbW1hciA9IGF0b20uZ3JhbW1hcnMuZ3JhbW1hckZvclNjb3BlTmFtZShcInNvdXJjZS5qcy5qc3hcIilcbiAgICAgICAgICBlZGl0b3Iuc2V0R3JhbW1hcihncmFtbWFyKTtcblxuICBhZnRlckVhY2ggLT5cbiAgICB3YWl0c0ZvclByb21pc2UgLT5cbiAgICAgIGF0b20ucGFja2FnZXMuZGVhY3RpdmF0ZVBhY2thZ2VzKClcbiAgICBydW5zIC0+XG4gICAgICBhdG9tLnBhY2thZ2VzLnVubG9hZFBhY2thZ2VzKClcblxuICBkZXNjcmliZSBcInRhZyBoYW5kbGluZ1wiLCAtPlxuICAgIGl0IFwic2hvdWxkIGF1dG9jb21wbGV0ZSB0YWdcIiwgLT5cbiAgICAgIGVkaXRvci5pbnNlcnRUZXh0KCc8cCcpXG4gICAgICBlZGl0b3IuaW5zZXJ0VGV4dCgnPicpXG4gICAgICBleHBlY3QoZWRpdG9yLmdldFRleHQoKSkudG9CZSgnPHA+PC9wPicpXG5cbiAgICBpdCBcInNob3VsZCBub3QgYXV0b2NvbXBsZXRlIHRhZyBhdHRyaWJ1dGVzXCIsIC0+XG4gICAgICBlZGl0b3IuaW5zZXJ0VGV4dCgnPHAgYXR0cj17IDEnKVxuICAgICAgZWRpdG9yLmluc2VydFRleHQoJz4nKVxuICAgICAgZXhwZWN0KGVkaXRvci5nZXRUZXh0KCkpLnRvQmUoJzxwIGF0dHI9eyAxPicpXG5cbiAgICBpdCBcInNob3VsZCBub3QgYXV0b2NvbXBsZXRlIHRhZyBhdHRyaWJ1dGVzIHdpdGggYXJyb3cgZnVuY3Rpb25zXCIsIC0+XG4gICAgICBlZGl0b3IuaW5zZXJ0VGV4dCgnPHAgYXR0cj17bnVtYmVyID0nKVxuICAgICAgZWRpdG9yLmluc2VydFRleHQoJz4nKVxuICAgICAgZXhwZWN0KGVkaXRvci5nZXRUZXh0KCkpLnRvQmUoJzxwIGF0dHI9e251bWJlciA9PicpXG5cbiAgICBpdCBcInNob3VsZCBub3QgYXV0b2NvbXBsZXRlIHRhZyBhdHRyaWJ1dGVzIHdoZW4gaW5zdGVydGVkIGJldHdlZW5cIiwgLT5cbiAgICAgIGVkaXRvci5pbnNlcnRUZXh0KCc8cCBhdHRyPXsgMSB9JylcbiAgICAgIGVkaXRvci5zZXRDdXJzb3JCdWZmZXJQb3NpdGlvbihbMCwxMV0pXG4gICAgICBlZGl0b3IuaW5zZXJ0VGV4dCgnPicpXG4gICAgICBleHBlY3QoZWRpdG9yLmdldFRleHQoKSkudG9CZSgnPHAgYXR0cj17IDE+IH0nKVxuXG4gICAgaXQgXCJzaG91bGQgcmVtb3ZlIGNsb3NpbmcgdGFnXCIsIC0+XG4gICAgICBlZGl0b3IuaW5zZXJ0VGV4dCgnPHAnKVxuICAgICAgZWRpdG9yLmluc2VydFRleHQoJz4nKVxuICAgICAgZXhwZWN0KGVkaXRvci5nZXRUZXh0KCkpLnRvQmUoJzxwPjwvcD4nKVxuICAgICAgZWRpdG9yLmJhY2tzcGFjZSgpXG4gICAgICBleHBlY3QoZWRpdG9yLmdldFRleHQoKSkudG9CZSgnPHAnKVxuXG4gICAgaXQgXCJzaG91bGQgYWRkIGV4dHJhIGxpbmUgYnJlYWsgd2hlbiBuZXcgbGluZSBhZGRlZCBiZXR3ZWVuIG9wZW4gYW5kIGNsb3NlIHRhZ1wiLCAtPlxuICAgICAgZWRpdG9yLmluc2VydFRleHQoJzxwPjwvcD4nKVxuICAgICAgZWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKFswLDNdKVxuICAgICAgZWRpdG9yLmluc2VydFRleHQoJ1xcbicpXG4gICAgICBleHBlY3QoZWRpdG9yLmJ1ZmZlci5nZXRMaW5lcygpWzBdKS50b0JlKCc8cD4nKVxuICAgICAgZXhwZWN0KGVkaXRvci5idWZmZXIuZ2V0TGluZXMoKVsyXSkudG9CZSgnPC9wPicpXG5cbiAgICAgIGVkaXRvci5zZXRUZXh0KFwiXCIpO1xuICAgICAgZWRpdG9yLmluc2VydFRleHQoJzxwXFxuICBhdHRyPVwiXCI+PC9wPicpXG4gICAgICBlZGl0b3Iuc2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oWzEsMTBdKVxuICAgICAgZWRpdG9yLmluc2VydFRleHQoJ1xcbicpXG4gICAgICBleHBlY3QoZWRpdG9yLmJ1ZmZlci5nZXRMaW5lcygpWzBdKS50b0JlKCc8cCcpXG4gICAgICBleHBlY3QoZWRpdG9yLmJ1ZmZlci5nZXRMaW5lcygpWzFdKS50b0JlKCcgIGF0dHI9XCJcIj4nKVxuICAgICAgZXhwZWN0KGVkaXRvci5idWZmZXIuZ2V0TGluZXMoKVszXSkudG9CZSgnPC9wPicpXG4iXX0=
